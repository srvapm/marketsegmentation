# -*- coding: utf-8 -*-
"""market segmentation with 2nd dataset .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17q05HHJzzocef2gG5VyRxKrL9TdnrCMs
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import matplotlib.pyplot as plt
# %matplotlib inline
!pip install bioinfokit
import bioinfokit as bio
import seaborn as sns
from sklearn.preprocessing import StandardScaler
scalar=StandardScaler()
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans,AgglomerativeClustering,DBSCAN,SpectralClustering
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn import tree
from sklearn import metrics
import plotly.express as px
import plotly
plotly.offline.init_notebook_mode(connected=True)

mac=pd.read_csv("cardata.csv")
mac.head()

mac.shape

mac.columns.values

mac.info()

mac.describe(include="all")

mac.isna().sum()
mac.isnull().sum()

print(mac.iloc[:, [0, 1, 3, 5, 7, 8]].describe())

mac['Owner'].value_counts()

mac["Car_Name"]= mac["Car_Name"].replace({'Yes':1, 'No':0})
mac["Year"] = mac["Year"].replace({'Yes':1, 'No':0})
mac["Selling_Price"] = mac["Selling_Price"].replace({'Yes':1, 'No':0})
mac["Present_Price"] = mac["Present_Price"].replace({'Yes':1, 'No':0})
mac["Kms_Driven"] = mac["Kms_Driven"].replace({'Yes':1, 'No':0})
mac["Fuel_Type"] = mac["Fuel_Type"].replace({'Yes':1, 'No':0})
mac["Seller_Type"] = mac["Seller_Type"].replace({'Yes':1, 'No':0})
mac["	Transmission"] = mac["Transmission"].replace({'Yes':1, 'No':0})
mac["Owner"] = mac["Owner"].replace({'Yes':1, 'No':0})

mac.head()

maac=mac.iloc[:,1:5]
maac.head()

plt.rcParams['figure.figsize'] = (25, 8)
f = sns.countplot(x=mac['Fuel_Type'],palette = 'Blues')
f.bar_label(f.containers[0])
plt.title(' fuel type selected by people')
plt.show()

from sklearn.preprocessing import LabelEncoder
def label(x):
    mac[x] = LabelEncoder().fit_transform(mac[x])
    return mac

category = ['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Kms_Driven', 'Fuel_Type', 'Seller_Type',]

for i in category:
    label(i)
mac

mcd = mac.loc[:,category]
mcd

x = mac.loc[:,category].values
print(x)

from sklearn import preprocessing
pca_data = preprocessing.scale(x)

pca = PCA(n_components=6)
pc = pca.fit_transform(x)
names = ['A','B','C','D','E','F',]
pf = pd.DataFrame(data = pc, columns = names)
pf

pca.explained_variance_ratio_

np.cumsum(pca.explained_variance_ratio_)

loadings = pca.components_
num_pc = pca.n_features_
pc_list = [chr(i) for i in range(ord('A'),ord('K')+1)]
loadings_mac = pd.DataFrame.from_dict(dict(zip(pc_list, loadings)))
loadings_mac['variable'] = mcd.columns.values
loadings_mac = loadings_mac.set_index('variable')
loadings_mac

plt.rcParams['figure.figsize'] = (20,15)
ax = sns.heatmap(loadings_mac, annot=True, cmap='coolwarm')
plt.show()

std_dev = []
for i in names:
    std_dev.append(np.std(pf[i]))

print("Standard Deviation")
np.array(std_dev)

cp = np.cumsum(pca.explained_variance_ratio_)
print("Cumulative Proportion")
cp

from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer
model = KMeans()
visualizer = KElbowVisualizer(model, k=(1,11)).fit(mcd)
visualizer.show()

kmeans = KMeans(n_clusters=3, init='k-means++', random_state=0).fit(mcd)
mac['cluster_num'] = kmeans.labels_
print ("kmeans.labels_",kmeans.labels_)
print ("kmeans.inertia_",kmeans.inertia_)
print("kmeans.n_iter_",kmeans.n_iter_)

print("kmeans.cluster_centers_",kmeans.cluster_centers_)

from collections import Counter
Counter(kmeans.labels_)

sns.scatterplot(data=pf, x="A", y="B", hue=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],
            marker="X", c="r", s=80, label="centroids")
plt.legend()
plt.show()

from statsmodels.graphics.mosaicplot import mosaic
from itertools import product

crosstab =pd.crosstab(mac['cluster_num'],mac['Fuel_Type'])
#crosstab = crosstab[['0','+1','+2','+3','+4','+5']]
crosstab

plt.rcParams['figure.figsize'] = (7,5)
mosaic(crosstab.stack())
plt.show()

crosstab_gender =pd.crosstab(mac['cluster_num'],mac['Fuel_Type'].replace({2: 'Petrol', 1: 'Diesel', 0 :'CNG'}))
crosstab_gender

plt.rcParams['figure.figsize'] = (7,5)
fig, ax = plt.subplots(figsize=(10, 8))
mosaic(crosstab_gender.stack(), ax=ax, title=' Cluster Number')
plt.show()

mac['Selling_Price'] = LabelEncoder().fit_transform(mac['Selling_Price'])
visit = mac.groupby('cluster_num')['Selling_Price'].mean()
visit = visit.to_frame().reset_index()
visit

mac['Fuel_Type'] = LabelEncoder().fit_transform(mac['Fuel_Type'])
Like = mac.groupby('cluster_num')['Fuel_Type'].mean()
Like = Like.to_frame().reset_index()
Like

mac['Fuel_Type'] = LabelEncoder().fit_transform(mac['Fuel_Type'])
Fuel_Type = mac.groupby('cluster_num')['Fuel_Type'].mean()
Fuel_Type = Fuel_Type.to_frame().reset_index()
Fuel_Type

segment = Fuel_Type.merge(Like, on='cluster_num', how='left').merge(visit, on='cluster_num', how='left')
segment

import pandas as pd

scaled_mac = scalar.fit_transform(maac)
pca = PCA(n_components=2)
principal_components = pca.fit_transform(scaled_mac)
pca_mac = pd.DataFrame(data=principal_components ,columns=["A","B",])
pca_mac.head()

sns.scatterplot(data=pca_mac, x="A", y="B")

from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
from yellowbrick.cluster import KElbowVisualizer
model = KMeans()
visualizer = KElbowVisualizer(model, k=(1,10))
visualizer.fit(scaled_mac)
visualizer.show()

from yellowbrick.cluster import SilhouetteVisualizer
model = KMeans(3)
visualizer = SilhouetteVisualizer(model)
visualizer.fit(scaled_mac)
visualizer.show()

kmeans_model=KMeans(3)
kmeans_model.fit_predict(scaled_mac)
pca_mac_kmeans= pd.concat([pca_mac,pd.DataFrame({'cluster':kmeans_model.labels_})],axis=1)
pca_mac_kmeans.head()

plt.figure(figsize=(8,8))
ax=sns.scatterplot(x="A",y="B",hue="cluster",data=pca_mac_kmeans,palette=['red','green','blue'])
plt.title("K-Means Clustering")
plt.show()

kmeans_model=KMeans(3)
kmeans_model.fit_predict(scaled_mac)
pca_mac_kmeans1= pd.concat([mac,pd.DataFrame({'cluster':kmeans_model.labels_})],axis=1)
pca_mac_kmeans1.head()

sns.countplot(x ='cluster', data = pca_mac_kmeans1,hue = "cluster")

cluster_1_mac = pca_mac_kmeans1[pca_mac_kmeans1["cluster"]==0]
cluster_1_mac.head()

cluster_2_mac = pca_mac_kmeans1[pca_mac_kmeans1["cluster"]==1]
cluster_2_mac.head()

cluster_3_mac = pca_mac_kmeans1[pca_mac_kmeans1["cluster"]==2]
cluster_3_mac.head()

mac_new= pd.concat([mac,pd.DataFrame({'cluster':kmeans_model.labels_})],axis=1)
mac_new.head()

mac_new['Selling_Price'].value_counts()

mac_new["Selling_Price"]= mac_new["Selling_Price"].replace({'Never':0, 'Once a year':1, 'Every three months':2, 'Once a month':3, 'Once a week':4, 'More than once a week':5})
mac_new['Selling_Price'].value_counts()

mac_new['Present_Price'].value_counts()

mac_new["Present_Price"]= mac_new["Present_Price"].replace({'I hate it!-5':0, '-4':1, '-3':2, '-2':3, '-1':4, '0':5, '+1':6, '+2':7, '+3':8, '+4':9, 'I love it!+5':10})
mac_new["Selling_Price"]= mac_new["Selling_Price"].replace({'CNG':0, 'Petrol':1 ,'Diesel':2})
mac_new

X = mac_new.drop(['cluster'],axis=1)
y= mac_new[['Present_Price']]
X_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.3)
X_test.head(5)

y_test.head(5)